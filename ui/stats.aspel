import "../imports.aspel";

HUDStatsState :: type struct
{
    up: bool;

    offset: int32;
    shown: int32;
    count: int32;
};

initStatsHUD :: func void()
{
    hud.stats.up = false;

    hud.stats.shown = 6;
    hud.stats.count = 17;
}

tickStatistics :: func void(x: float32, y: float32)
{
    PIX8: float32 : (8.0 / cast(float32) cameraWindowHeight) * cameraOrthoHeight;

    if input.key[INPUT_KEY_STATS] && !prevInput.key[INPUT_KEY_STATS]
    {
        hud.stats.up = !hud.stats.up;
        hud.stats.offset = 0;
    }

    if hud.stats.up
    {
        if hud.stats.offset > 0
        {
            if hudBoxClick(x + PIX8 * 3.0, y + PIX8 * 6.25 + hud.stats.shown * PIX8 * 2.0,
                           PIX8 * 54.0, PIX8 * 2.5)
            {
                hud.stats.offset = hud.stats.offset - 1;
            }
        }
        if (hud.stats.offset + hud.stats.shown) < hud.stats.count
        {
            if hudBoxClick(x + PIX8 * 3.0, y + PIX8 * 1.25,
                           PIX8 * 54.0, PIX8 * 2.5)
            {
                hud.stats.offset = hud.stats.offset + 1;
            }
        }

        if hudBoxClick(x, y, PIX8 * 60.0, PIX8 * 38.0)
        {
            input.key[INPUT_KEY_LMB] = false;
        }
    }
}

renderStatistics :: func void(player: Entity^, x: float32, y: float32)
{
    PIX8: float32 : (8.0 / cast(float32) cameraWindowHeight) * cameraOrthoHeight;

    if hud.stats.up
    {
        renderInventoryBox(x, y, PIX8 * 60.0, PIX8 * 38.0, PIX8 * 4.0,
                           0.09, 0.66, 0.97, 0.9);

        attributeNames: asl.string[] : [4];
        attributeNames[0] = "Strength:";
        attributeNames[1] = "Agility:";
        attributeNames[2] = "Vitality:";
        attributeNames[3] = "Intelligence:";

        attributeValues: int32[] : [4];
        attributeValues[0] = 32;
        attributeValues[1] = 61;
        attributeValues[2] = 27;
        attributeValues[3] = 52;

        i := 0;
        while i < attributeNames.n
        {
            name := attributeNames[i];
            value := attributeValues[i];

            valueStr: uint8[] : [32];
            valueStr.n = cast(uint64) intToString(value, valueStr, 0);

            renderText(name,
                       x + PIX8 * 2.0, y + PIX8 * 33.0 - cast(float32) i * PIX8 * 3.5,
                       PIX8 * 3.0, TEXT_ALIGN_LEFT);

            renderText(valueStr,
                       x + PIX8 * 45.0, y + PIX8 * 33.0 - cast(float32) i * PIX8 * 3.5,
                       PIX8 * 3.0, TEXT_ALIGN_LEFT);

            renderInventoryBox(x + PIX8 * 55.0, y + PIX8 * 33.0 - cast(float32) i * PIX8 * 3.5,
                               PIX8 * 3.0, PIX8 * 3.0, PIX8 * 1.0,
                               0.09, 0.66, 0.97, 0.9);

            renderText("+",
                       x + PIX8 * 56.75, y + PIX8 * 33.5 - cast(float32) i * PIX8 * 3.5,
                       PIX8 * 2.0, TEXT_ALIGN_CENTER);

            i = i + 1;
        }

        detailNames: asl.string[] : [hud.stats.count];
        detailNames[0]  = "Life:";
        detailNames[1]  = "Maximum life:";
        detailNames[2]  = "Life per second:";
        detailNames[3]  = "Life steal:";
        detailNames[4]  = "Mana:";
        detailNames[5]  = "Maximum mana:";
        detailNames[6]  = "Mana per second:";
        detailNames[7]  = "Mana steal:";
        detailNames[8]  = "Damage multiplier:";
        detailNames[9]  = "Miss chance:";
        detailNames[10] = "Swiftness:";
        detailNames[11] = "Attack speed:";
        detailNames[12] = "Armor:";
        detailNames[13] = "Dodge chance:";
        detailNames[14] = "Physical resistance:";
        detailNames[15] = "Magic resistance:";
        detailNames[16] = "Poison resistance:";

        detailValues: float32[] : [hud.stats.count];
        detailValues[0]  = player.health;
        detailValues[1]  = player.maxHealth;
        detailValues[2]  = player.healthPerTick / 60.0;
        detailValues[3]  = player.healthSteal;
        detailValues[4]  = player.mana;
        detailValues[5]  = player.maxMana;
        detailValues[6]  = player.manaPerTick / 60.0;
        detailValues[7]  = player.manaSteal;
        detailValues[8]  = player.damageMultiplier;
        detailValues[9]  = player.missChance;
        detailValues[10] = player.swiftness;
        detailValues[11] = player.attackSpeed;
        detailValues[12] = player.armor;
        detailValues[13] = player.dodgeChance;
        detailValues[14] = player.physicalResistance;
        detailValues[15] = player.magicResistance;
        detailValues[16] = player.poisonResistance;

        i = 0;
        while i < hud.stats.shown
        {
            name := detailNames[hud.stats.offset + i];
            value := detailValues[hud.stats.offset + i];

            valueStr: uint8[] : [32];
            valueStr.n = cast(uint64) floatToString(value, valueStr, 0);

            offY := hud.stats.shown - i - 1;

            renderText(name,
                       x + PIX8 * 45.0, y + PIX8 * 5.0 + cast(float32) offY * PIX8 * 2.0,
                       PIX8 * 2.0, TEXT_ALIGN_RIGHT);

            renderText(valueStr,
                       x + PIX8 * 46.0, y + PIX8 * 5.0 + cast(float32) offY * PIX8 * 2.0,
                       PIX8 * 2.0, TEXT_ALIGN_LEFT);

            i = i + 1;
        }

        if hud.stats.offset > 0
        {
            renderInventoryBox(x + PIX8 * 3.0, y + PIX8 * 6.25 + hud.stats.shown * PIX8 * 2.0,
                               PIX8 * 54.0, PIX8 * 2.5, PIX8 * 1.0,
                               0.09, 0.66, 0.97, 0.9);
            renderText("<",
                       x + PIX8 * 30.0, y + PIX8 * 6.5 + hud.stats.shown * PIX8 * 2.0,
                       PIX8 * 2.0, TEXT_ALIGN_CENTER);
        }

        if (hud.stats.offset + hud.stats.shown) < hud.stats.count
        {
            renderInventoryBox(x + PIX8 * 3.0, y + PIX8 * 1.25,
                               PIX8 * 54.0, PIX8 * 2.5, PIX8 * 1.0,
                               0.09, 0.66, 0.97, 0.9);
            renderText(">",
                       x + PIX8 * 30.0, y + PIX8 * 1.5,
                       PIX8 * 2.0, TEXT_ALIGN_CENTER);
        }
    }
}
