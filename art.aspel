import "imports.aspel";

Texture :: type uint32;

SpriteSheet :: type struct
{
    tex: Texture;
    w: int32;
    h: int32;
};

Sprite :: type struct
{
    tex: Texture;
    l: float32;
    r: float32;
    t: float32;
    b: float32;
};

Animation :: type struct
{
    frames: Sprite[];
    frameTime: int32;
    tick: int32;

    hasSlowFrames: bool;
    slowFrames: Sprite[];
    slowFrameTime: int32;
    slowFrameFreq: int32;
    slowTick: int32;
};

namespace art
{
    ssTerrain: SpriteSheet;
    ssEntities: SpriteSheet;
    ssProjectiles: SpriteSheet;
    ssParticles: SpriteSheet;
    ssUI: SpriteSheet;

    namespace entity
    {
        playerEyesRestDownFrames: Sprite[] : [1];
        playerEyesWalkDownFrames: Sprite[] : [2];
        playerSkinRestDownFrames: Sprite[] : [1];
        playerSkinWalkDownFrames: Sprite[] : [2];
        playerBodyRestDownFrames: Sprite[] : [1];
        playerBodyWalkDownFrames: Sprite[] : [2];
        playerHairRestDownFrames: Sprite[] : [1];
        playerHairWalkDownFrames: Sprite[] : [2];

        playerEyesRestUpFrames: Sprite[] : [1];
        playerEyesWalkUpFrames: Sprite[] : [2];
        playerSkinRestUpFrames: Sprite[] : [1];
        playerSkinWalkUpFrames: Sprite[] : [2];
        playerBodyRestUpFrames: Sprite[] : [1];
        playerBodyWalkUpFrames: Sprite[] : [2];
        playerHairRestUpFrames: Sprite[] : [1];
        playerHairWalkUpFrames: Sprite[] : [2];

        playerEyesRestRightFrames: Sprite[] : [1];
        playerEyesWalkRightFrames: Sprite[] : [2];
        playerSkinRestRightFrames: Sprite[] : [1];
        playerSkinWalkRightFrames: Sprite[] : [2];
        playerBodyRestRightFrames: Sprite[] : [1];
        playerBodyWalkRightFrames: Sprite[] : [2];
        playerHairRestRightFrames: Sprite[] : [1];
        playerHairWalkRightFrames: Sprite[] : [2];

        playerEyesRestDown: Animation;
        playerEyesWalkDown: Animation;
        playerSkinRestDown: Animation;
        playerSkinWalkDown: Animation;
        playerBodyRestDown: Animation;
        playerBodyWalkDown: Animation;
        playerHairRestDown: Animation;
        playerHairWalkDown: Animation;

        playerEyesRestUp: Animation;
        playerEyesWalkUp: Animation;
        playerSkinRestUp: Animation;
        playerSkinWalkUp: Animation;
        playerBodyRestUp: Animation;
        playerBodyWalkUp: Animation;
        playerHairRestUp: Animation;
        playerHairWalkUp: Animation;

        playerEyesRestRight: Animation;
        playerEyesWalkRight: Animation;
        playerSkinRestRight: Animation;
        playerSkinWalkRight: Animation;
        playerBodyRestRight: Animation;
        playerBodyWalkRight: Animation;
        playerHairRestRight: Animation;
        playerHairWalkRight: Animation;

        slimeFrames: Sprite[] : [2];
        slime: Animation;

        overlordFrames: Sprite[] : [4];
        overlordFramesSlow: Sprite[] : [6];
        overlord: Animation;
    }

    namespace projectile
    {
        fireballFrames: Sprite[] : [4];
        fireball: Animation;

        eyeballFrames: Sprite[] : [4];
        eyeball: Animation;
    }

    namespace particle
    {
        fireballTrail: Sprite[] : [2];
        eyeballTrail: Sprite[] : [2];

        smallBloodStain: Sprite[] : [2];
        bigBloodStain: Sprite[] : [1];

        overlordTentacleRemains: Sprite[] : [5];
        overlordSmallRemains: Sprite[] : [4];
    }

    namespace ui
    {
        leftMouseButton: Sprite;
        rightMouseButton: Sprite;
        actionBarSprites: Sprite[] : [6];

        TEMP_inventoryBox: Sprite;

        heart: Sprite;
        mana: Sprite;

        healthBarEdge: Sprite;
        healthBar: Sprite;
        healthBarFilling: Sprite;

        invalidSprite: Sprite;
        invalidFrames: Sprite[] : [1];
        invalidAnimation: Animation;

        namespace effect
        {
            healthRegen: Sprite;
            manaRegen: Sprite;
            poison: Sprite;
        }
    }
}

getFrameArray :: func void(a: Sprite[], ss: SpriteSheet, lpx: int32, tpx: int32,
                           w: int32, h: int32, cellSize: int32)
{
    i := 0;
    while i < a.n
    {
        a[i] = getSprite(ss, lpx, tpx, w, h, cellSize);
        lpx = lpx + w;
        i = i + 1;
    }
}

getFrameArrayLoop :: func void(a: Sprite[], ss: SpriteSheet, lpx: int32, tpx: int32,
                               w: int32, h: int32, cellSize: int32)
{
    upc := a.n / 2 + 1;

    i := 0;
    while i < a.n
    {
        a[i] = getSprite(ss, lpx, tpx, w, h, cellSize);

        i = i + 1;
        if i >= upc then
            lpx = lpx - w;
        else
            lpx = lpx + w;
    }
}

setAnimationFrames :: func void(a: Animation^, frames: Sprite[], frameTime: int32, tick: int32)
{
    a.frames = frames;
    a.frameTime = frameTime;
    a.tick = tick;
}

setAnimationSlowFrames :: func void(a: Animation^, slowFrames: Sprite[], slowFrameTime: int32,
                                    slowFrameFreq: int32, slowTick: int32)
{
    a.hasSlowFrames = true;
    a.slowFrames = slowFrames;
    a.slowFrameTime = slowFrameTime;
    a.slowFrameFreq = slowFrameFreq;
    a.slowTick = slowTick;
}

loadArt :: func void()
{
    art.ssTerrain = loadSpriteSheet("res/terrain.bmp");
    art.ssEntities = loadSpriteSheet("res/entities.bmp");
    art.ssProjectiles = loadSpriteSheet("res/projectiles.bmp");
    art.ssParticles = loadSpriteSheet("res/particles.bmp");
    art.ssUI = loadSpriteSheet("res/ui.bmp");

    /* ENTITIES */

    getFrameArray(art.entity.playerEyesRestDownFrames, art.ssEntities, 0, 0, 2, 2, 8);
    getFrameArray(art.entity.playerEyesWalkDownFrames, art.ssEntities, 2, 0, 2, 2, 8);
    getFrameArray(art.entity.playerSkinRestDownFrames, art.ssEntities, 0, 2, 2, 2, 8);
    getFrameArray(art.entity.playerSkinWalkDownFrames, art.ssEntities, 2, 2, 2, 2, 8);
    getFrameArray(art.entity.playerBodyRestDownFrames, art.ssEntities, 0, 4, 2, 2, 8);
    getFrameArray(art.entity.playerBodyWalkDownFrames, art.ssEntities, 2, 4, 2, 2, 8);
    getFrameArray(art.entity.playerHairRestDownFrames, art.ssEntities, 0, 6, 2, 2, 8);
    getFrameArray(art.entity.playerHairWalkDownFrames, art.ssEntities, 2, 6, 2, 2, 8);

    getFrameArray(art.entity.playerEyesRestUpFrames, art.ssEntities, 0,  8, 2, 2, 8);
    getFrameArray(art.entity.playerEyesWalkUpFrames, art.ssEntities, 2,  8, 2, 2, 8);
    getFrameArray(art.entity.playerSkinRestUpFrames, art.ssEntities, 0, 10, 2, 2, 8);
    getFrameArray(art.entity.playerSkinWalkUpFrames, art.ssEntities, 2, 10, 2, 2, 8);
    getFrameArray(art.entity.playerBodyRestUpFrames, art.ssEntities, 0, 12, 2, 2, 8);
    getFrameArray(art.entity.playerBodyWalkUpFrames, art.ssEntities, 2, 12, 2, 2, 8);
    getFrameArray(art.entity.playerHairRestUpFrames, art.ssEntities, 0, 14, 2, 2, 8);
    getFrameArray(art.entity.playerHairWalkUpFrames, art.ssEntities, 2, 14, 2, 2, 8);

    getFrameArray(art.entity.playerEyesRestRightFrames, art.ssEntities, 0, 16, 2, 2, 8);
    getFrameArray(art.entity.playerEyesWalkRightFrames, art.ssEntities, 2, 16, 2, 2, 8);
    getFrameArray(art.entity.playerSkinRestRightFrames, art.ssEntities, 0, 18, 2, 2, 8);
    getFrameArray(art.entity.playerSkinWalkRightFrames, art.ssEntities, 2, 18, 2, 2, 8);
    getFrameArray(art.entity.playerBodyRestRightFrames, art.ssEntities, 0, 20, 2, 2, 8);
    getFrameArray(art.entity.playerBodyWalkRightFrames, art.ssEntities, 2, 20, 2, 2, 8);
    getFrameArray(art.entity.playerHairRestRightFrames, art.ssEntities, 0, 22, 2, 2, 8);
    getFrameArray(art.entity.playerHairWalkRightFrames, art.ssEntities, 2, 22, 2, 2, 8);

    setAnimationFrames(&art.entity.playerEyesRestDown,  art.entity.playerEyesRestDownFrames, 1,  0);
    setAnimationFrames(&art.entity.playerEyesWalkDown,  art.entity.playerEyesWalkDownFrames, 10, 0);
    setAnimationFrames(&art.entity.playerSkinRestDown,  art.entity.playerSkinRestDownFrames, 1,  0);
    setAnimationFrames(&art.entity.playerSkinWalkDown,  art.entity.playerSkinWalkDownFrames, 10, 0);
    setAnimationFrames(&art.entity.playerBodyRestDown,  art.entity.playerBodyRestDownFrames, 1,  0);
    setAnimationFrames(&art.entity.playerBodyWalkDown,  art.entity.playerBodyWalkDownFrames, 10, 0);
    setAnimationFrames(&art.entity.playerHairRestDown,  art.entity.playerHairRestDownFrames, 1,  0);
    setAnimationFrames(&art.entity.playerHairWalkDown,  art.entity.playerHairWalkDownFrames, 10, 0);

    setAnimationFrames(&art.entity.playerEyesRestUp,  art.entity.playerEyesRestUpFrames, 1,  0);
    setAnimationFrames(&art.entity.playerEyesWalkUp,  art.entity.playerEyesWalkUpFrames, 10, 0);
    setAnimationFrames(&art.entity.playerSkinRestUp,  art.entity.playerSkinRestUpFrames, 1,  0);
    setAnimationFrames(&art.entity.playerSkinWalkUp,  art.entity.playerSkinWalkUpFrames, 10, 0);
    setAnimationFrames(&art.entity.playerBodyRestUp,  art.entity.playerBodyRestUpFrames, 1,  0);
    setAnimationFrames(&art.entity.playerBodyWalkUp,  art.entity.playerBodyWalkUpFrames, 10, 0);
    setAnimationFrames(&art.entity.playerHairRestUp,  art.entity.playerHairRestUpFrames, 1,  0);
    setAnimationFrames(&art.entity.playerHairWalkUp,  art.entity.playerHairWalkUpFrames, 10, 0);

    setAnimationFrames(&art.entity.playerEyesRestRight,  art.entity.playerEyesRestRightFrames, 1,  0);
    setAnimationFrames(&art.entity.playerEyesWalkRight,  art.entity.playerEyesWalkRightFrames, 10, 0);
    setAnimationFrames(&art.entity.playerSkinRestRight,  art.entity.playerSkinRestRightFrames, 1,  0);
    setAnimationFrames(&art.entity.playerSkinWalkRight,  art.entity.playerSkinWalkRightFrames, 10, 0);
    setAnimationFrames(&art.entity.playerBodyRestRight,  art.entity.playerBodyRestRightFrames, 1,  0);
    setAnimationFrames(&art.entity.playerBodyWalkRight,  art.entity.playerBodyWalkRightFrames, 10, 0);
    setAnimationFrames(&art.entity.playerHairRestRight,  art.entity.playerHairRestRightFrames, 1,  0);
    setAnimationFrames(&art.entity.playerHairWalkRight,  art.entity.playerHairWalkRightFrames, 10, 0);

    getFrameArray(art.entity.slimeFrames, art.ssEntities, 0, 24, 2, 2, 8);
    setAnimationFrames(&art.entity.slime,  art.entity.slimeFrames, 5, 0);

    getFrameArrayLoop(art.entity.overlordFrames, art.ssEntities, 0, 29, 3, 3, 8);
    getFrameArrayLoop(art.entity.overlordFramesSlow, art.ssEntities, 0, 26, 3, 3, 8);
    setAnimationFrames(&art.entity.overlord, art.entity.overlordFrames, 10, 0);
    setAnimationSlowFrames(&art.entity.overlord, art.entity.overlordFramesSlow, 5, 250, 0);

    /* PROJECTILES */

    getFrameArrayLoop(art.projectile.fireballFrames, art.ssProjectiles, 0, 0, 2, 2, 8);
    setAnimationFrames(&art.projectile.fireball, art.projectile.fireballFrames, 2, 0);

    getFrameArrayLoop(art.projectile.eyeballFrames, art.ssProjectiles, 0, 2, 2, 2, 8);
    setAnimationFrames(&art.projectile.eyeball, art.projectile.eyeballFrames, 6, 0);

    /* PARTICLES */

    getFrameArray(art.particle.fireballTrail, art.ssParticles, 0, 0, 1, 1, 8);
    getFrameArray(art.particle.eyeballTrail, art.ssParticles, 0, 1, 1, 1, 8);

    getFrameArray(art.particle.smallBloodStain, art.ssParticles, 0, 2, 1, 1, 8);
    getFrameArray(art.particle.bigBloodStain, art.ssParticles, 0, 5, 2, 2, 8);

    getFrameArray(art.particle.overlordTentacleRemains, art.ssParticles, 0, 3, 1, 1, 8);
    getFrameArray(art.particle.overlordSmallRemains, art.ssParticles, 0, 4, 1, 1, 8);

    /* UI */

    art.ui.leftMouseButton = getSprite(art.ssUI, 0, 5, 2, 2, 8);
    art.ui.rightMouseButton = getSprite(art.ssUI, 2, 5, 2, 2, 8);
    art.ui.actionBarSprites[0] = art.ui.leftMouseButton;
    art.ui.actionBarSprites[1] = art.ui.rightMouseButton;
    art.ui.actionBarSprites[2] = getSprite(art.ssUI, 1, 2, 1, 1, 8);
    art.ui.actionBarSprites[3] = getSprite(art.ssUI, 2, 2, 1, 1, 8);
    art.ui.actionBarSprites[4] = getSprite(art.ssUI, 3, 2, 1, 1, 8);
    art.ui.actionBarSprites[5] = getSprite(art.ssUI, 4, 2, 1, 1, 8);

    art.ui.TEMP_inventoryBox = getSprite(art.ssUI, 0, 7, 3, 3, 8);

    art.ui.heart = getSprite(art.ssUI, 1, 10, 1, 1, 8);
    art.ui.mana = getSprite(art.ssUI, 0, 10, 1, 1, 8);

    art.ui.healthBarEdge = getSprite(art.ssUI, 2, 10, 1, 1, 8);
    art.ui.healthBar = getSprite(art.ssUI, 3, 10, 1, 1, 8);
    art.ui.healthBarFilling = getSprite(art.ssUI, 4, 10, 1, 1, 8);

    getFrameArray(art.ui.invalidFrames, art.ssUI, 30, 30, 2, 2, 8);
    setAnimationFrames(&art.ui.invalidAnimation, art.ui.invalidFrames, 1, 0);
    art.ui.invalidSprite = art.ui.invalidFrames[0];

    art.ui.effect.healthRegen = getSprite(art.ssUI, 0, 11, 2, 2, 8);
    art.ui.effect.manaRegen = getSprite(art.ssUI, 2, 11, 2, 2, 8);
    art.ui.effect.poison = getSprite(art.ssUI, 4, 11, 2, 2, 8);
}

getSprite :: func Sprite(ss: SpriteSheet, lpx: int32, tpx: int32,
                          w: int32, h: int32, cellSize: int32)
{
    lpx = lpx * cellSize;
    tpx = tpx * cellSize;
    w = w * cellSize;
    h = h * cellSize;

    s: Sprite;
    s.tex = ss.tex;
    s.l = lpx / cast(float32) ss.w;
    s.r = (lpx + w) / cast(float32) ss.w;
    s.t = 1.0 - tpx / cast(float32) ss.h;
    s.b = 1.0 - (tpx + h) / cast(float32) ss.h;
    return s;
}

loadSpriteSheet :: func SpriteSheet(filepath: asl.string)
{
    width: uint32;
    height: uint32;
    texture := loadBitmap(filepath, &width, &height);

    ss: SpriteSheet;
    ss.tex = texture;
    ss.w = cast(int32) width;
    ss.h = cast(int32) height;
    return ss;
}

bitmapPixelMemory: uint8[] : [1024 * 1024 * 16]; // 16 MB of texture memory
bitmapPixelMemoryOffset: uint64 = 0;

loadBitmap :: func Texture(filepath: asl.string, out_width: uint32^, out_height: uint32^)
{
    bmpFile := asl.file(filepath);

    width: uint32;
    height: uint32;

    pixels: uint8[];
    pixels.a = bitmapPixelMemory.a + bitmapPixelMemoryOffset;
    pixels.n = bitmapPixelMemory.n - bitmapPixelMemoryOffset;

    stream := asl.openFileInputStream(bmpFile);
    if stream == 0
    {
        reportString("Failed to open bitmap file!\n");
        asl.exit(1);
    }

    if !asl.readBitmap(stream, &width, &height, pixels)
    {
        reportString("Failed to load bitmap!\n");
        asl.exit(1);
    }
    stream.close(stream);

    asl.releaseFile(bmpFile);

    texture: Texture;
    gl.glGenTextures(1, &texture);
    gl.glBindTexture(gl.GL_TEXTURE_2D, texture);

    mode: uint32 = gl.GL_RGBA;
    gl.glTexParameteri(gl.GL_TEXTURE_2D, gl.GL_TEXTURE_WRAP_S, gl.GL_REPEAT);
    gl.glTexParameteri(gl.GL_TEXTURE_2D, gl.GL_TEXTURE_WRAP_T, gl.GL_REPEAT);
    gl.glTexParameteri(gl.GL_TEXTURE_2D, gl.GL_TEXTURE_MIN_FILTER, gl.GL_NEAREST);
    gl.glTexParameteri(gl.GL_TEXTURE_2D, gl.GL_TEXTURE_MAG_FILTER, gl.GL_NEAREST);

    gl.gluBuild2DMipmaps(gl.GL_TEXTURE_2D, 4, cast(gl.GLsizei) width, cast(gl.GLsizei) height,
                         mode, gl.GL_UNSIGNED_BYTE, pixels);

    ^out_width = width;
    ^out_height = height;
    return texture;
}

renderSpriteAdv :: func void(x: float32, y: float32,
                             w: float32, h: float32,
                             a: float32,
                             tl: float32, tr: float32,
                             tb: float32, tt: float32,
                             cr: float32, cg: float32, cb: float32, ca: float32,
                             s: Sprite)
{
    hw := w / 2.0;
    hh := h / 2.0;
    tw := s.r - s.l;
    th := s.t - s.b;
    utl := s.l + tw * tl + 1e-7;
    utr := s.l + tw * tr - 1e-7;
    utb := s.b + th * tb + 1e-7;
    utt := s.b + th * tt - 1e-7;

    gl.glBindTexture(gl.GL_TEXTURE_2D, s.tex);

    gl.glPushMatrix();
    gl.glTranslatef(x + hw, y + hh, 0.0);
    gl.glRotatef(a, 0.0, 0.0, 1.0);

    gl.glColor4f(cr, cg, cb, ca);

    gl.glBegin(gl.GL_QUADS);
    gl.glTexCoord2f(utl, utb); gl.glVertex2f(-hw - 1e-7, -hh - 1e-7);
    gl.glTexCoord2f(utr, utb); gl.glVertex2f( hw + 1e-7, -hh - 1e-7);
    gl.glTexCoord2f(utr, utt); gl.glVertex2f( hw + 1e-7,  hh + 1e-7);
    gl.glTexCoord2f(utl, utt); gl.glVertex2f(-hw - 1e-7,  hh + 1e-7);
    gl.glEnd();

    gl.glPopMatrix();
}

renderSprite :: func void(x: float32, y: float32,
                          w: float32, h: float32,
                          s: Sprite)
{
    renderSpriteAdv(x, y, w, h, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, s);
}

renderRotatedSprite :: func void(x: float32, y: float32,
                                 w: float32, h: float32,
                                 a: float32, s: Sprite)
{
    renderSpriteAdv(x, y, w, h, a, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, s);
}

renderAnimationAdv :: func void(a: Animation^,
                                x: float32, y: float32,
                                w: float32, h: float32,
                                r: float32,
                                tl: float32, tr: float32,
                                tb: float32, tt: float32,
                                cr: float32, cg: float32, cb: float32, ca: float32)
{
    frameIndex: int32 = a.tick / a.frameTime;

    renderSpriteAdv(x, y,
                    w, h, r,
                    tl, tr,
                    tb, tt,
                    cr, cg, cb, ca,
                    a.frames[frameIndex]);

    a.tick = a.tick + 1;
    if a.tick >= (a.frameTime * a.frames.n) then
        a.tick = 0;

    if a.hasSlowFrames
    {
        slowFrameIndex: int32 = 0;
        if a.slowTick >= a.slowFrameFreq then
            slowFrameIndex = ((a.slowTick - a.slowFrameFreq) / a.slowFrameTime);

        renderSpriteAdv(x, y,
                        w, h, r,
                        tl, tr,
                        tb, tt,
                        cr, cg, cb, ca,
                        a.slowFrames[slowFrameIndex]);

        a.slowTick = a.slowTick + 1;
        if a.slowTick >= a.slowFrameFreq + (a.slowFrameTime * a.slowFrames.n) then
            a.slowTick = 0;
    }
}

renderAnimation :: func void(a: Animation^,
                             x: float32, y: float32,
                             w: float32, h: float32,
                             r: float32)
{
    renderAnimationAdv(a, x, y, w, h, r,
                       0.0, 1.0, 0.0, 1.0,
                       1.0, 1.0, 1.0, 1.0);
}
