import "imports.aspel";

// CLEANUP: put this in the declaration of World.
MAX_ENTITY_COUNT :: 512;
STATIC_WORLD_ENTITY_LIST: Entity[] : [MAX_ENTITY_COUNT];
STATIC_WORLD_ENTITY_OCCUPIED: bool[] : [MAX_ENTITY_COUNT];

MAX_PROJECTILE_COUNT :: 2048;
STATIC_WORLD_PROJECTILE_LIST: Projectile[] : [MAX_PROJECTILE_COUNT];
STATIC_WORLD_PROJECTILE_OCCUPIED: bool[] : [MAX_PROJECTILE_COUNT];

PLAYER_ABILITY_COUNT :: 6;
STATIC_WORLD_PLAYER_ABILITIES: Ability^[] : [PLAYER_ABILITY_COUNT];


World :: type struct
{
    terrain: Terrain;
    entityList: Entity[];
    entityOccupied: bool[];
    projectileList: Projectile[];
    projectileOccupied: bool[];

    player: Entity^;
    inventoryUp: bool;
    statisticsUp: bool;
    playerAbilities: Ability^[];
    playerInventory: Inventory;
};

addEntityToWorld :: func Entity^(world: World^)
{
    i := 0;
    while i < MAX_ENTITY_COUNT
    {
        if !world.entityOccupied[i]
        {
            world.entityOccupied[i] = true;

            entity := &world.entityList[i];
            effectI := 0;
            while effectI < entity.effects.n
            {
                entity.effects[effectI].id = EFFECT_TYPEID_NONE;
                effectI = effectI + 1;
            }
            return entity;
        }
        i = i + 1;
    }

    return null;
}

removeEntityFromWorld :: func void(world: World^, entity: Entity^)
{
    index := cast(int32) (cast(uint64) entity - cast(uint64) world.entityList) /
             sizeof(Entity);
    world.entityOccupied[index] = false;
}

addProjectileToWorld :: func Projectile^(world: World^)
{
    i := 0;
    while i < MAX_PROJECTILE_COUNT
    {
        if !world.projectileOccupied[i]
        {
            world.projectileOccupied[i] = true;
            return &world.projectileList[i];
        }
        i = i + 1;
    }

    return null;
}

removeProjectileFromWorld :: func void(world: World^, projectile: Projectile^)
{
    index := cast(int32) (cast(uint64) projectile - cast(uint64) world.projectileList) /
             sizeof(Projectile);
    world.projectileOccupied[index] = false;
}

initWorld :: func void(world: World^)
{
    world.entityList = STATIC_WORLD_ENTITY_LIST;
    world.entityOccupied = STATIC_WORLD_ENTITY_OCCUPIED;
    asl.memset(world.entityOccupied, 0, sizeof(bool) * world.entityOccupied.n);

    entityI := 0;
    while entityI < world.entityList.n
    {
        entity := &world.entityList[entityI];
        entity.effects.n = cast(uint64) MAX_EFFECTS_ON_ENTITY;
        entity.effects.a = STATIC_EFFECT_LIST.a + entityI * entity.effects.n;

        entityI = entityI + 1;
    }

    world.projectileList = STATIC_WORLD_PROJECTILE_LIST;
    world.projectileOccupied = STATIC_WORLD_PROJECTILE_OCCUPIED;
    asl.memset(world.projectileOccupied, 0, sizeof(bool) * world.projectileOccupied.n);

    world.inventoryUp = false;
    world.statisticsUp = false;

    world.playerAbilities = STATIC_WORLD_PLAYER_ABILITIES;
    asl.memset(world.playerAbilities, 0, sizeof(Ability^) * world.playerAbilities.n);

    initTerrain(&world.terrain, 128, 128);
    initInventory(&world.playerInventory);
}

populateWorld :: func void(world: World^)
{
    random: asl.Random;
    asl.seedRandomTime(&random);

    world.player = addEntityToWorld(world);
    initPlayer(world.player, world.terrain.w / 2.0, world.terrain.h / 2.0);

    i := 0;
    while i < 64
    {
        x := cast(int32)(cast(uint32) asl.randomInt32(&random) % cast(uint32) world.terrain.w);
        y := cast(int32)(cast(uint32) asl.randomInt32(&random) % cast(uint32) world.terrain.h);
        overlord := addEntityToWorld(world);
        initOverlord(overlord, x, y);
        i = i + 1;
    }
}

renderDebugHitboxes: bool = false;

tickWorld :: func void(world: World^)
{
    if input.key[INPUT_KEY_DEBUG4] && !prevInput.key[INPUT_KEY_DEBUG4] then
        renderDebugHitboxes = !renderDebugHitboxes;

    i := 0;
    while i < world.entityList.n
    {
        if world.entityOccupied[i]
        {
            entity := &world.entityList[i];

            effectI := 0;
            while effectI < entity.effects.n
            {
                effect := &entity.effects[effectI];
                if effect.id != EFFECT_TYPEID_NONE
                {
                    effect.apply(world, effect, entity);
                    effect.time = effect.time - 1;
                    if effect.time <= 0 then
                        effect.id = EFFECT_TYPEID_NONE;
                }
                effectI = effectI + 1;
            }

            entity.entityType.tick(world, entity);
        }

        i = i + 1;
    }

    i = 0;
    while i < world.projectileList.n
    {
        if world.projectileOccupied[i]
        {
            projectile := &world.projectileList[i];
            tickProjectile(world, projectile);
        }

        i = i + 1;
    }

    tickParticles();
}

renderWorld :: func void(world: World^)
{
    renderTerrain(&world.terrain);
    renderParticles();

    i := 0;
    while i < world.entityList.n
    {
        if world.entityOccupied[i]
        {
            entity := &world.entityList[i];
            entity.entityType.render(entity);

            if renderDebugHitboxes then
                renderEntityHitboxes(entity);
        }

        i = i + 1;
    }

    i = 0;
    while i < world.projectileList.n
    {
        if world.projectileOccupied[i]
        {
            projectile := &world.projectileList[i];
            renderProjectile(projectile);

            if renderDebugHitboxes then
                renderProjectileHitboxes(projectile);
        }

        i = i + 1;
    }
}
