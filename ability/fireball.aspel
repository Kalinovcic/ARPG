import "../imports.aspel";

FIREBALL_MANA: float32 : 2.0;
FIREBALL_DAMAGE: float32 : 8.0;
FIREBALL_SPEED: float32 : 0.05;
FIREBALL_RADIUS: float32 : 0.15;
FIREBALL_LIFETIME: int32 : 400;

namespace ability
{
    fireball: Ability;
}

fireballRequirements :: func bool(e: Entity^)
{
    return manaRequirement(e, FIREBALL_MANA);
}

fireballActivate :: func void(world: World^, e: Entity^, tx: float32, ty: float32)
{
    spendMana(e, FIREBALL_MANA);

    ecx := e.x + e.vw / 2.0;
    ecy := e.y + e.vh / 2.0;

    dx := tx - ecx;
    dy := ty - ecy;
    mouseAngle := asl.atan2(-dx, dy);

    fireball := addProjectileToWorld(world);
    fireball.x = ecx;
    fireball.y = ecy;
    fireball.z = 0;

    fireball.a = asl.to_degrees(mouseAngle);
    fireball.speed = FIREBALL_SPEED;
    fireball.damage = FIREBALL_DAMAGE;
    fireball.owner = e;

    fireball.radius = FIREBALL_RADIUS;
    fireball.lifetime = FIREBALL_LIFETIME;
    fireball.animation = art.projectile.fireball;

    random: asl.Random;
    asl.seedRandomTime(&random);
    randomIndex := cast(uint32) asl.randomInt32(&random);
    spriteIndex := randomIndex % art.particle.fireballTrail.n;
    sprite := art.particle.fireballTrail[spriteIndex];
    fireball.particleSprite = sprite;
}

initAbilityFireball :: func void()
{
    ability.fireball.checkRequirements = fireballRequirements;
    ability.fireball.activate = fireballActivate;
    ability.fireball.icon = art.projectile.fireball;
}
