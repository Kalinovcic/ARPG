import "../imports.aspel";

EYEBALL_MANA: float32 : 15.0;
EYEBALL_DAMAGE: float32 : 20.0;
EYEBALL_SPEED: float32 : 0.05;
EYEBALL_RADIUS: float32 : 0.3;
EYEBALL_LIFETIME: int32 : 400;

namespace ability
{
    eyeball: Ability;
}

eyeballRequirements :: func bool(e: Entity^)
{
    return manaRequirement(e, EYEBALL_MANA);
}

eyeballActivate :: func void(world: World^, e: Entity^, tx: float32, ty: float32)
{
    spendMana(e, EYEBALL_MANA);

    ecx := e.x + e.vw / 2.0;
    ecy := e.y + e.vh / 2.0;

    dx := tx - ecx;
    dy := ty - ecy;
    mouseAngle := asl.atan2(-dx, dy);

    eyeball := addProjectileToWorld(world);
    eyeball.x = ecx;
    eyeball.y = ecy;
    eyeball.z = 0;

    eyeball.a = asl.to_degrees(mouseAngle);
    eyeball.speed = EYEBALL_SPEED;
    eyeball.damage = EYEBALL_DAMAGE;
    eyeball.owner = e;

    eyeball.radius = EYEBALL_RADIUS;
    eyeball.lifetime = EYEBALL_LIFETIME;
    eyeball.animation = art.projectile.eyeball;

    random: asl.Random;
    asl.seedRandomTime(&random);
    randomIndex := cast(uint32) asl.randomInt32(&random);
    spriteIndex := randomIndex % art.particle.eyeballTrail.n;
    sprite := art.particle.eyeballTrail[spriteIndex];
    eyeball.particleSprite = sprite;
}

initAbilityEyeball :: func void()
{
    ability.eyeball.checkRequirements = eyeballRequirements;
    ability.eyeball.activate = eyeballActivate;
    ability.eyeball.icon = art.projectile.eyeball;
}
