import "imports.aspel";

HUDState :: type struct
{
    inventoryUp: bool;

    stats: HUDStatsState;
};

hud: HUDState;

initHUD :: func void()
{
    hud.inventoryUp = false;

    initStatsHUD();
}

tickHUD :: func void(world: World^)
{
    if input.key[INPUT_KEY_ITEMS] && !prevInput.key[INPUT_KEY_ITEMS]
    {
        hud.inventoryUp = !hud.inventoryUp;
    }

    if input.key[INPUT_KEY_F4] && !prevInput.key[INPUT_KEY_F4] then
        toggleFullscreen();

    PIX8: float32 : (8.0 / cast(float32) cameraWindowHeight) * cameraOrthoHeight;
    halfOW := cameraOrthoWidth / 2.0;
    halfOH := cameraOrthoHeight / 2.0;

    tickStatistics(-halfOW + PIX8 * 4.0, -halfOH + PIX8 * 2.0);
}

renderOutOfFocusOverlay :: func void()
{
    PIX8: float32 : (8.0 / cast(float32) cameraWindowHeight) * cameraOrthoHeight;

    gl.glBindTexture(gl.GL_TEXTURE_2D, 0);
    gl.glColor4f(0.0, 0.0, 0.0, 0.5);

    gl.glBegin(gl.GL_QUADS);
    gl.glVertex2f(cameraOrthoLeft,  cameraOrthoBottom);
    gl.glVertex2f(cameraOrthoRight, cameraOrthoBottom);
    gl.glVertex2f(cameraOrthoRight, cameraOrthoTop);
    gl.glVertex2f(cameraOrthoLeft,  cameraOrthoTop);
    gl.glEnd();

    renderText("Out of focus!", 0.0, -PIX8 * 2.5,
                                PIX8 * 5.0, TEXT_ALIGN_CENTER);
}

renderHUD :: func void(world: World^)
{
    PIX8: float32 : (8.0 / cast(float32) cameraWindowHeight) * cameraOrthoHeight;
    halfOW := cameraOrthoWidth / 2.0;
    halfOH := cameraOrthoHeight / 2.0;
    player := world.player;

    if player != null
    {
        /* HEALTH BAR and MANA BAR */
        renderHealthbar(halfOW - PIX8 * 50.0, halfOH - PIX8 * 6.0,
                        PIX8 * 48.0, PIX8 * 4.0,
                        player.health, player.maxHealth,
                        1.00, 0.16, 0.16,
                        0.0, 0.0, 0.0);

        renderHealthbar(halfOW - PIX8 * 50.0, halfOH - PIX8 * 10.5,
                        PIX8 * 48.0, PIX8 * 4.0,
                        player.mana, player.maxMana,
                        0.15, 0.45, 0.87,
                        0.0, 0.0, 0.0);

        /* ACTION BAR */
        renderActionBar(world.playerAbilities, -halfOW + PIX8 * 2.0, halfOH - PIX8 * 2.0);

        /* EFFECT ICONS */
        renderEffectBar(world.player.effects, halfOW - PIX8 * 6.5, halfOH - PIX8 * 12.5);

        /* INVENTORY and EQUIPMENT */
        if hud.inventoryUp
        {
            renderInventory(&world.playerInventory, -halfOW + PIX8 * 4.0, halfOH - PIX8 * 10.0);
            renderEquipment(&world.playerInventory, halfOW - PIX8 * 8.5, -halfOH + PIX8 * 2.0);
        }

        if hud.stats.up
        {
            renderStatistics(world.player, -halfOW + PIX8 * 4.0, -halfOH + PIX8 * 2.0);
        }
    }

    /* ENEMY HOVER INFO */
    renderEnemyHoverInfo(player, 0.0, -halfOH + PIX8 * 2.0);

    /* FPS */
    fpsText: uint8[] : [64];
    fpsTextOff: int32 = 0;
    fpsTextOff = fpsTextOff + intToString(framesPerSecond, fpsText, fpsTextOff);
    fpsTextOff = fpsTextOff + copyString(" fps", fpsText, fpsTextOff);
    fpsText.n = cast(uint64) fpsTextOff;
    renderText(fpsText, -halfOW + PIX8 * 1.0, -halfOH + PIX8 * 1.0,
                        PIX8 * 2.0, TEXT_ALIGN_LEFT);

    /* OUT OF FOCUS */
    if !input.focus then
        renderOutOfFocusOverlay();
}
