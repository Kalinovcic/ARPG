import "../imports.aspel";

// CLEANUP: Move these somewhere!
playerHasMoveTarget: bool = false;
playerTargetX: float32;
playerTargetY: float32;

initPlayer :: func void(player: Entity^, posX: float32, posY: float32)
{
    player.x = posX;
    player.y = posY;
    player.vw = 0.8;
    player.vh = 0.8;
    player.pw = 0.6;
    player.ph = 0.3;
    player.pox = 0.1;
    player.poy = 0.0;
    player.animation = art.ui.invalidAnimation;

    player.health = 322;
    player.maxHealth = 400;
    player.mana = 124;
    player.maxMana = 150;

    player.tick = tickPlayer;
    player.render = renderPlayer;
    player.onDeath = onDeathPlayer;
}

tickPlayer :: func void(world: World^, player: Entity^)
{
    moved: bool = false;
    if input.key[INPUT_KEY_LMB]
    {
        movePointX := input.mouseX + cameraFocusX;
        movePointY := input.mouseY + cameraFocusY;

        hit: Entity^[] : [2];
        hitCount: int32 = pointCollideWithEntity(world, movePointX, movePointY, hit);
        playerHit: int32 = 0;

        hitI := 0;
        while hitI < hitCount
        {
            if hit[hitI] == player then
                playerHit = playerHit + 1;
            hitI = hitI + 1;
        }

        hitCount = hitCount - playerHit;

        if hitCount == 0
        {
            moved = true;

            playerHasMoveTarget = true;
            playerTargetX = movePointX;
            playerTargetY = movePointY;
        }
    }

    if playerHasMoveTarget
    {
        deltaX := playerTargetX - (player.x + player.pox + player.pw / 2.0);
        deltaY := playerTargetY - (player.y + player.poy + player.ph / 2.0);
        distance := asl.sqrt(deltaX * deltaX + deltaY * deltaY);

        movementSpeed :: 0.05;
        moveStep := movementSpeed;
        if moveStep > distance
        {
            moveStep = distance;
            playerHasMoveTarget = false;
        }

        angle := asl.atan2(deltaY, deltaX) + asl.to_radians(-90);
        s: float32 = cast(float32) asl.sin(angle);
        c: float32 = cast(float32) asl.cos(angle);
        moveX: float32 = -s * moveStep;
        moveY: float32 =  c * moveStep;

        if !input.key[INPUT_KEY_MACRO4] then
            entityCollideWithTerrain(&world.terrain, player, &moveX, &moveY);
        // TODO: collide with other entitites

        movedDistance := asl.sqrt(moveX * moveX + moveY * moveY);
        if movedDistance < (movementSpeed * 0.3) then
            playerHasMoveTarget = false;

        player.x = player.x + moveX;
        player.y = player.y + moveY;

        visualDX: int32 = 0;
        visualDY: int32 = 0;
        moveA := asl.to_degrees(asl.atan2(moveY, moveX));

        if moveA < -160.0 || moveA > 160.0 || (moveA > -20.0 && moveA < 20.0)
        {
            if moveX < 0.0 then visualDX = -1;
            if moveX > 0.0 then visualDX =  1;
        }
        else
        {
            if moveY < 0.0 then visualDY = -1;
            if moveY > 0.0 then visualDY =  1;
        }

        if !playerHasMoveTarget
        {
            player.userdata = player.userdata & ~0x1;
        }
        else
        {
            player.userdata = (player.userdata & 0xFF00) |
                              ((visualDX + 1) << 4) |
                              ((visualDY + 1) << 1) | 0x1;
        }
    }

    abilityKeys: int64[] : [8];
    abilityKeys[0] = INPUT_KEY_LMB;
    abilityKeys[1] = INPUT_KEY_SHIFT_LMB;
    abilityKeys[2] = INPUT_KEY_RMB;
    abilityKeys[3] = INPUT_KEY_SHIFT_RMB;
    abilityKeys[4] = INPUT_KEY_MACRO1;
    abilityKeys[5] = INPUT_KEY_MACRO2;
    abilityKeys[6] = INPUT_KEY_MACRO3;
    abilityKeys[7] = INPUT_KEY_MACRO4;

    abilityIndex: int64[] : [abilityKeys.n];
    abilityIndex[0] = 0;
    abilityIndex[1] = 0;
    abilityIndex[2] = 1;
    abilityIndex[3] = 1;
    abilityIndex[4] = 2;
    abilityIndex[5] = 3;
    abilityIndex[6] = 4;
    abilityIndex[7] = 5;

    if input.key[INPUT_KEY_F1] && !prevInput.key[INPUT_KEY_F1] then
        applyEffect(player.effects, &effect.healthRegen, 300, 1.0);
    if input.key[INPUT_KEY_F2] && !prevInput.key[INPUT_KEY_F2] then
        applyEffect(player.effects, &effect.manaRegen, 300, 1.0);
    if input.key[INPUT_KEY_F3] && !prevInput.key[INPUT_KEY_F3] then
        applyEffect(player.effects, &effect.poison, 300, 1.0);

    abilityI := 0;
    while abilityI < abilityIndex.n
    {
        key := abilityKeys[abilityI];
        index := abilityIndex[abilityI];

        if !(key == INPUT_KEY_LMB && moved) then
            if input.key[key] && !prevInput.key[key]
            {
                ability := world.playerAbilities[index];
                if ability != null
                {
                    if (key == INPUT_KEY_LMB) || (key == INPUT_KEY_SHIFT_LMB)
                    {
                        playerHasMoveTarget = false;
                        player.userdata = player.userdata & ~0x1;
                    }

                    if ability.checkRequirements(player)
                    {
                        tx := input.mouseX + cameraFocusX;
                        ty := input.mouseY + cameraFocusY;
                        ability.activate(world, player, tx, ty);
                    }
                }
            }
        abilityI = abilityI + 1;
    }

    focusCameraOnEntity(player);
}

renderPlayer :: func void(player: Entity^)
{
    userdata := player.userdata;
    mx := ((userdata >> 4) & 0x3) - 1;
    my := ((userdata >> 1) & 0x3) - 1;
    walk := userdata & 0x1;
    tick := (userdata & 0xFF00) >> 8;

    player.userdata = (userdata & ~0xFF00) | ((tick + 1) << 8);

    eyesAnimP: Animation^ = &art.ui.invalidAnimation;
    skinAnimP: Animation^ = &art.ui.invalidAnimation;
    bodyAnimP: Animation^ = &art.ui.invalidAnimation;
    hairAnimP: Animation^ = &art.ui.invalidAnimation;
    flipX: bool = false;

    if my < 0
    {
        if walk == 0
        {
            eyesAnimP = &art.entity.playerEyesRestDown;
            skinAnimP = &art.entity.playerSkinRestDown;
            bodyAnimP = &art.entity.playerBodyRestDown;
            hairAnimP = &art.entity.playerHairRestDown;
        }
        else
        {
            eyesAnimP = &art.entity.playerEyesWalkDown;
            skinAnimP = &art.entity.playerSkinWalkDown;
            bodyAnimP = &art.entity.playerBodyWalkDown;
            hairAnimP = &art.entity.playerHairWalkDown;
        }
    }
    else if my > 0
    {
        if walk == 0
        {
            eyesAnimP = &art.entity.playerEyesRestUp;
            skinAnimP = &art.entity.playerSkinRestUp;
            bodyAnimP = &art.entity.playerBodyRestUp;
            hairAnimP = &art.entity.playerHairRestUp;
        }
        else
        {
            eyesAnimP = &art.entity.playerEyesWalkUp;
            skinAnimP = &art.entity.playerSkinWalkUp;
            bodyAnimP = &art.entity.playerBodyWalkUp;
            hairAnimP = &art.entity.playerHairWalkUp;
        }
    }
    else if mx > 0
    {
        if walk == 0
        {
            eyesAnimP = &art.entity.playerEyesRestRight;
            skinAnimP = &art.entity.playerSkinRestRight;
            bodyAnimP = &art.entity.playerBodyRestRight;
            hairAnimP = &art.entity.playerHairRestRight;
        }
        else
        {
            eyesAnimP = &art.entity.playerEyesWalkRight;
            skinAnimP = &art.entity.playerSkinWalkRight;
            bodyAnimP = &art.entity.playerBodyWalkRight;
            hairAnimP = &art.entity.playerHairWalkRight;
        }
    }
    else if mx < 0
    {
        if walk == 0
        {
            eyesAnimP = &art.entity.playerEyesRestRight;
            skinAnimP = &art.entity.playerSkinRestRight;
            bodyAnimP = &art.entity.playerBodyRestRight;
            hairAnimP = &art.entity.playerHairRestRight;
        }
        else
        {
            eyesAnimP = &art.entity.playerEyesWalkRight;
            skinAnimP = &art.entity.playerSkinWalkRight;
            bodyAnimP = &art.entity.playerBodyWalkRight;
            hairAnimP = &art.entity.playerHairWalkRight;
        }
        flipX = true;
    }

    eyesAnim := ^eyesAnimP;
    skinAnim := ^skinAnimP;
    bodyAnim := ^bodyAnimP;
    hairAnim := ^hairAnimP;
    eyesAnim.tick = tick % (eyesAnim.frameTime * eyesAnim.frames.n);
    skinAnim.tick = tick % (skinAnim.frameTime * skinAnim.frames.n);
    bodyAnim.tick = tick % (bodyAnim.frameTime * bodyAnim.frames.n);
    hairAnim.tick = tick % (hairAnim.frameTime * hairAnim.frames.n);

    tl := 0.0;
    tr := 1.0;
    if flipX
    {
        tl = 1.0;
        tr = 0.0;
    }

    eyesColorR := 0.10;
    eyesColorG := 0.34;
    eyesColorB := 0.00;
    skinColorR := 0.98;
    skinColorG := 0.82;
    skinColorB := 0.18;
    bodyColorR := 0.02;
    bodyColorG := 0.00;
    bodyColorB := 0.61;
    hairColorR := 0.62;
    hairColorG := 0.31;
    hairColorB := 0.92;

    renderAnimationAdv(&eyesAnim, player.x, player.y, player.vw, player.vh, 0.0,
                       tl, tr, 0.0, 1.0, eyesColorR, eyesColorG, eyesColorB, 1.0);
    renderAnimationAdv(&skinAnim, player.x, player.y, player.vw, player.vh, 0.0,
                       tl, tr, 0.0, 1.0, skinColorR, skinColorG, skinColorB, 1.0);
    renderAnimationAdv(&bodyAnim, player.x, player.y, player.vw, player.vh, 0.0,
                       tl, tr, 0.0, 1.0, bodyColorR, bodyColorG, bodyColorB, 1.0);
    renderAnimationAdv(&hairAnim, player.x, player.y, player.vw, player.vh, 0.0,
                       tl, tr, 0.0, 1.0, hairColorR, hairColorG, hairColorB, 1.0);
}

onDeathPlayer :: func void(world: World^, player: Entity^)
{
    world.player = null;
}
