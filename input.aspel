import "imports.aspel";

InputState :: type struct
{
    key: bool[]; // CLEANUP: [INPUT_KEY_TOTAL]
    mouseX: float32; // CLEANUP: Union with array?
    mouseY: float32;
    focus: bool;
};

rawMouseXPos: float32;
rawMouseYPos: float32;
input: InputState;
prevInput: InputState;

// CLEANUP: enum
INPUT_KEY_LMB       :: 1;
INPUT_KEY_RMB       :: 2;
INPUT_KEY_SHIFT_LMB :: 3;
INPUT_KEY_MACRO1    :: 4;
INPUT_KEY_MACRO2    :: 5;
INPUT_KEY_MACRO3    :: 6;
INPUT_KEY_MACRO4    :: 7;
INPUT_KEY_ITEMS     :: 8;
INPUT_KEY_STATS     :: 9;
INPUT_KEY_F1        :: 10;
INPUT_KEY_F2        :: 11;
INPUT_KEY_F3        :: 12;
INPUT_KEY_F4        :: 13;
INPUT_KEY_DEBUG1    :: 14;
INPUT_KEY_DEBUG2    :: 15;
INPUT_KEY_DEBUG3    :: 16;
INPUT_KEY_DEBUG4    :: 17;

INPUT_KEY_TOTAL  :: 32;

initInputState :: func void()
{
    input.key = new bool[INPUT_KEY_TOTAL]; // CLEANUP: Should do this, look at typedef
    input.focus = true;

    prevInput.key = new bool[INPUT_KEY_TOTAL]; // CLEANUP: Should do this, look at typedef
    prevInput.focus = true;

    asl.memset(input.key, 0, cast(uint64) INPUT_KEY_TOTAL * sizeof(bool));
}

clearInputState :: func void()
{
    updateInput();

    input.mouseX = 0;
    input.mouseY = 0;
    asl.memset(input.key, 0, cast(uint64) INPUT_KEY_TOTAL * sizeof(bool));
}

handleKeyInput :: func void(key: int32, state: bool, shift: bool)
{
    if shift
    {
    }
    else
    {
    }

    if key == glfw3.GLFW_KEY_1     then input.key[INPUT_KEY_MACRO1] = state;
    if key == glfw3.GLFW_KEY_2     then input.key[INPUT_KEY_MACRO2] = state;
    if key == glfw3.GLFW_KEY_3     then input.key[INPUT_KEY_MACRO3] = state;
    if key == glfw3.GLFW_KEY_4     then input.key[INPUT_KEY_MACRO4] = state;
    if key == glfw3.GLFW_KEY_I     then input.key[INPUT_KEY_ITEMS]  = state;
    if key == glfw3.GLFW_KEY_C     then input.key[INPUT_KEY_STATS]  = state;
    if key == glfw3.GLFW_KEY_F1    then input.key[INPUT_KEY_F1]     = state;
    if key == glfw3.GLFW_KEY_F2    then input.key[INPUT_KEY_F2]     = state;
    if key == glfw3.GLFW_KEY_F3    then input.key[INPUT_KEY_F3]     = state;
    if key == glfw3.GLFW_KEY_F4    then input.key[INPUT_KEY_F4]     = state;
    if key == glfw3.GLFW_KEY_F9    then input.key[INPUT_KEY_DEBUG1] = state;
    if key == glfw3.GLFW_KEY_F10   then input.key[INPUT_KEY_DEBUG2] = state;
    if key == glfw3.GLFW_KEY_F11   then input.key[INPUT_KEY_DEBUG3] = state;
    if key == glfw3.GLFW_KEY_F12   then input.key[INPUT_KEY_DEBUG4] = state;
}

handleMouseInput :: func void(button: int32, state: bool, shift: bool)
{
    if shift
    {
        if (button == glfw3.GLFW_MOUSE_BUTTON_LEFT)  then input.key[INPUT_KEY_SHIFT_LMB] = state;
    }
    else
    {
        if (button == glfw3.GLFW_MOUSE_BUTTON_LEFT)  then input.key[INPUT_KEY_LMB] = state;
    }

    if (button == glfw3.GLFW_MOUSE_BUTTON_RIGHT) then input.key[INPUT_KEY_RMB] = state;
}

handleMotionInput :: func void(xpos: float32, ypos: float32)
{
    rawMouseXPos = xpos;
    rawMouseYPos = ypos;
}

handleFocusInput :: func void(focus: bool)
{
    input.focus = focus;
}

processInput :: func void()
{
    mouseXP := rawMouseXPos / cast(float32) cameraWindowWidth;
    mouseYP := rawMouseYPos / cast(float32) cameraWindowHeight;
    input.mouseX =  (mouseXP - 0.5) * cameraOrthoWidth;
    input.mouseY = -(mouseYP - 0.5) * cameraOrthoHeight;
}

updateInput :: func void()
{
    asl.memcopy(prevInput.key, input.key, cast(uint64) INPUT_KEY_TOTAL * sizeof(bool));
    prevInput.mouseX = input.mouseX;
    prevInput.mouseY = input.mouseY;
    prevInput.focus = input.focus;
}
