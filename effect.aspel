import "imports.aspel";

Effect :: type struct
{
    id: int32;
    time: int32;
    power: float32;
    apply: delegate void(world: World^, effect: Effect^, e: Entity^);
    icon: Sprite;
    iconbg: int32;
};

MAX_EFFECTS_ON_ENTITY :: 16;
// No need for this, once we can put a static array in the Entity structure.
STATIC_EFFECT_LIST: Effect[] : [MAX_ENTITY_COUNT * MAX_EFFECTS_ON_ENTITY];

// CLEANUP: enum
EFFECT_ICONBG_POSITIVE :: 0;
EFFECT_ICONBG_NEGATIVE :: 1;

// CLEANUP: enum
EFFECT_TYPEID_NONE         :: 0;
EFFECT_TYPEID_HEALTH_REGEN :: 1;
EFFECT_TYPEID_MANA_REGEN   :: 2;
EFFECT_TYPEID_POISON       :: 3;

namespace effect
{
    none: Effect;
}

initEffects :: func void()
{
    effect.none.id = EFFECT_TYPEID_NONE;
    effect.none.icon = art.ui.invalidSprite;

    initEffectHealthRegen();
    initEffectManaRegen();
    initEffectPoison();
}

applyEffect :: func bool(array: Effect[], effect: Effect^, time: int32, power: float32)
{
    effectI := 0;
    while effectI < array.n
    {
        if array[effectI].id == effect.id
        {
            array[effectI].time = time;
            array[effectI].power = power;
            return true;
        }
        effectI = effectI + 1;
    }

    effectI = 0;
    while effectI < array.n
    {
        if array[effectI].id == EFFECT_TYPEID_NONE
        {
            array[effectI] = ^effect;
            array[effectI].time = time;
            array[effectI].power = power;
            return true;
        }
        effectI = effectI + 1;
    }

    return false;
}
