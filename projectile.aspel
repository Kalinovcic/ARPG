import "imports.aspel";

Projectile :: type struct
{
    x: float32;
    y: float32;
    z: float32;

    a: float32;
    speed: float32;
    owner: Entity^;
    damage: float32;

    radius: float32;
    lifetime: int32;
    animation: Animation;
};

tickProjectile :: func void(world: World^, p: Projectile^)
{
    s: float32 = cast(float32) asl.sin(asl.to_radians(p.a));
    c: float32 = cast(float32) asl.cos(asl.to_radians(p.a));

    dx := -s * p.speed;
    dy := c * p.speed;

    p.x = p.x + dx;
    p.y = p.y + dy;

    collisions: Entity^[] : [2];
    collisionC := projectileCollideWithEntities(world, p, collisions);
    if collisionC >= 1
    {
        index := 0;
        if collisions[index] == p.owner then
            index = index + 1;

        if collisionC > index
        {
            entityTakeDamage(world, collisions[index], p.damage);
            removeProjectileFromWorld(world, p);
        }
    }

    p.lifetime = p.lifetime - 1;
    if p.lifetime < 0
    {
        removeProjectileFromWorld(world, p);
    }
}

renderProjectile :: func void(p: Projectile^)
{
    renderAnimation(&p.animation, p.x, p.y, p.radius * 2.0, p.radius * 2.0, p.a);
}
