import "imports.aspel";

Projectile :: type struct
{
    x: float32;
    y: float32;
    z: float32;

    a: float32;
    speed: float32;
    owner: Entity^;
    damage: float32;

    radius: float32;
    lifetime: int32;
    animation: Animation;

    particleSprite: Sprite;
};

tickProjectile :: func void(world: World^, p: Projectile^)
{
    random: asl.Random;
    asl.seedRandomTime(&random);

    s: float32 = cast(float32) asl.sin(asl.to_radians(p.a));
    c: float32 = cast(float32) asl.cos(asl.to_radians(p.a));

    dx := -s * p.speed;
    dy := c * p.speed;

    p.x = p.x + dx;
    p.y = p.y + dy;

    collisions: Entity^[] : [2];
    collisionC := projectileCollideWithEntities(world, p, collisions);
    if collisionC >= 1
    {
        index := 0;
        if collisions[index] == p.owner then
            index = index + 1;

        if collisionC > index
        {
            i := 0;
            while i < 10
            {
                addParticle(p.x, p.y,
                            asl.randomInt32(&random) % 180,
                            0.1, 0.7,
                            asl.randomInt32(&random) % 180, 0.0, 0.0,
                            0.1, p.particleSprite, 10, 25);
                i = i + 1;
            }

            entity := collisions[index];
            entity.entityType.hurt(world, entity, p.damage);
            removeProjectileFromWorld(world, p);
        }
    }

    p.lifetime = p.lifetime - 1;
    if p.lifetime < 0
    {
        removeProjectileFromWorld(world, p);
    }

    if (p.lifetime % 4) == 0 then
        addParticle(p.x, p.y,
                    p.a + 180.0 + asl.randomInt32(&random) % 45,
                    0.05, 0.7,
                    asl.randomInt32(&random) % 180, 0.0, 0.0,
                    0.1, p.particleSprite, 10, 25);

    tickAnimation(&p.animation);
}

renderProjectile :: func void(p: Projectile^)
{
    renderAnimation(&p.animation, p.x - p.radius, p.y - p.radius,
                    p.radius * 2.0, p.radius * 2.0, p.a);
}


renderProjectileHitboxes :: func void(p: Projectile^)
{
    renderBoxOutline(p.x, p.y, p.radius * 2.0, p.radius * 2.0, p.a, 1.0, 0.0, 0.0, 1.0);
}
