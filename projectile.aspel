import "imports.aspel";

Projectile :: type struct
{
    x: float32;
    y: float32;
    z: float32;

    a: float32;
    speed: float32;
    owner: Entity^;
    damage: float32;

    radius: float32;
    lifetime: int32;
    animation: Animation;
};

tickProjectile :: func void(world: World^, p: Projectile^)
{
    s: float32 = cast(float32) asl.sin(asl.to_radians(p.a));
    c: float32 = cast(float32) asl.cos(asl.to_radians(p.a));

    dx := -s * p.speed;
    dy := c * p.speed;

    p.x = p.x + dx;
    p.y = p.y + dy;

    collisions: Entity^[] : [2];
    collisionC := projectileCollideWithEntities(world, p, collisions);
    if collisionC >= 1
    {
        index := 0;
        if collisions[index] == p.owner then
            index = index + 1;

        if collisionC > index
        {
            // TODO: Some unified "taking damage" system.
            collisions[index].health = collisions[index].health - p.damage;
            removeProjectileFromWorld(world, p);
        }
    }

    p.lifetime = p.lifetime - 1;
    if p.lifetime < 0
    {
        removeProjectileFromWorld(world, p);
    }
}

renderProjectile :: func void(p: Projectile^)
{
    frameIndex: int32 = p.animation.tick / p.animation.frameTime;

    renderRotatedSprite(p.x - p.radius, p.y - p.radius,
                        p.radius * 2.0, p.radius * 2.0, p.a,
                        p.animation.frames[frameIndex]);

    p.animation.tick = p.animation.tick + 1;
    if p.animation.tick >= (p.animation.frameTime * p.animation.frames.n) then
        p.animation.tick = 0;

    if p.animation.hasSlowFrames
    {
        slowFrameIndex: int32 = 0;
        if p.animation.slowTick >= p.animation.slowFrameFreq
        {
            slowFrameIndex = ((p.animation.slowTick -
                               p.animation.slowFrameFreq) / p.animation.slowFrameTime);
        }

        renderSprite(p.x - p.radius, p.y - p.radius,
                     p.radius * 2.0, p.radius * 2.0,
                     p.animation.slowFrames[slowFrameIndex]);

        p.animation.slowTick = p.animation.slowTick + 1;
        if p.animation.slowTick >= p.animation.slowFrameFreq +
                                   (p.animation.slowFrameTime *
                                    p.animation.slowFrames.n) then
            p.animation.slowTick = 0;
    }
}
