import "imports.aspel";

world: World;

gameInit :: func void()
{
    loadArt();

    initInputState();
    initAbilities();
    initEffects();
    initParticles();

    initWorld(&world);
    populateWorld(&world);

    world.playerAbilities[0] = &ability.fireball;
    world.playerAbilities[1] = &ability.eyeball;
}

gameTick :: func void()
{
    // Inventory toggle
    if input.key[INPUT_KEY_ITEMS] && !prevInput.key[INPUT_KEY_ITEMS] then
        world.inventoryUp = !world.inventoryUp;

    // Statistics toggle
    if input.key[INPUT_KEY_STATS] && !prevInput.key[INPUT_KEY_STATS] then
        world.statisticsUp = !world.statisticsUp;

    if input.key[INPUT_KEY_F4] && !prevInput.key[INPUT_KEY_F4] then
        toggleFullscreen();

    tickWorld(&world);
}

gameRender :: func void(orthoW: float32, orthoH: float32)
{
    halfOW := orthoW / 2.0;
    halfOH := orthoH / 2.0;

    player := world.player;
    camTransX := -player.x - player.vw / 2.0;
    camTransY := -player.y - player.vh / 2.0;

    // Game world
    gl.glTranslatef(camTransX, camTransY, 0.0);
    renderWorld(&world,
                -camTransX - halfOW, -camTransX + halfOW,
                -camTransY - halfOH, -camTransY + halfOH);

    // HUD
    gl.glTranslatef(-camTransX, -camTransY, 0.0);

    HEALTH_PER_HEART: float32 : 20.0;
    HEARTS_PER_ROW: int64 : 10;
    heartI: int32 = 0;
    healthI: float32 = 0;
    while healthI < player.maxHealth
    {
        percGray: float32 = (player.maxHealth - healthI) / HEALTH_PER_HEART;
        if percGray > 1.0 then percGray = 1.0;

        percRed: float32 = (player.health - healthI) / HEALTH_PER_HEART;
        if percRed > 1.0 then percRed = 1.0;
        if percRed < 0.0 then percRed = 0.0;

        row: int32 = heartI / HEARTS_PER_ROW;
        col: int32 = heartI % HEARTS_PER_ROW;

        renderSpriteAdv(halfOW - 0.7 - HEARTS_PER_ROW * 0.3 + col * 0.3 + percRed * 0.28,
                        halfOH - 0.55 - row * 0.3,
                        0.28 * (percGray - percRed), 0.28, 0.0,
                        percRed, percGray,
                        0.0, 1.0,
                        0.8, 0.8, 0.8, 1.0,
                        art.ui.heart);

        renderSpriteAdv(halfOW - 0.7 - HEARTS_PER_ROW * 0.3 + col * 0.3,
                        halfOH - 0.55 - row * 0.3,
                        0.28 * percRed, 0.28, 0.0,
                        0.0, percRed,
                        0.0, 1.0,
                        1.0, 0.1, 0.1, 1.0,
                        art.ui.heart);

        heartI = heartI + 1;
        healthI = heartI * HEALTH_PER_HEART;
    }

    healthTextOff: float32 = asl.min(HEARTS_PER_ROW, player.maxHealth / HEALTH_PER_HEART);

    // CLEANUP: sprintf
    life: int64 = cast(int64) asl.ceil(player.health);
    maxLife: int64 = cast(int64) asl.ceil(player.maxHealth);

    text: uint8[] : [64];
    textOff: int32 = 0;
    textOff = textOff + intToString(life, text, textOff);
    textOff = textOff + copyString("/", text, textOff);
    textOff = textOff + intToString(maxLife, text, textOff);
    text.n = cast(uint64) textOff;

    renderText(text, halfOW - 0.7 - healthTextOff / 2.0 * 0.3,
                     halfOH - 0.2, 0.18, TEXT_ALIGN_CENTER);

    // CLEANUP: I need a better name for this.
    MANA_PER_MANAICON: float32 : 20.0;
    manaIconI: int32 = 0;
    manaI: float32 = 0;
    while manaI < player.maxMana
    {
        percGray: float32 = (player.maxMana - manaI) / MANA_PER_MANAICON;
        if percGray > 1.0 then percGray = 1.0;

        percYellow: float32 = (player.mana - manaI) / MANA_PER_MANAICON;
        if percYellow < 0.0 then percYellow = 0.0;
        if percYellow > 1.0 then percYellow = 1.0;

        totalGray: float32 = percGray - percYellow;

        renderSpriteAdv(halfOW - 0.51,
                        halfOH - 0.55 - manaIconI * 0.3 + (1.0 - percGray) * 0.28,
                        0.28, 0.28 * totalGray, 0.0,
                        0.0, 1.0,
                        1.0 - percGray, 1.0 - percYellow,
                        0.8, 0.8, 0.8, 1.0,
                        art.ui.mana);

        renderSpriteAdv(halfOW - 0.51,
                        halfOH - 0.55 - manaIconI * 0.3 + (1.0 - percYellow) * 0.28,
                        0.28, 0.28 * percYellow, 0.0,
                        0.0, 1.0,
                        1.0 - percYellow, 1.0,
                        1.0, 1.0, 0.0, 1.0,
                        art.ui.mana);

        manaIconI = manaIconI + 1;
        manaI = manaIconI * MANA_PER_MANAICON;
    }

    renderText("Mana", halfOW - 0.37, halfOH - 0.2, 0.18, TEXT_ALIGN_CENTER);

    actionBarI: int32 = 0;
    while actionBarI < PLAYER_ABILITY_COUNT
    {
        renderSpriteAdv(-halfOW + 0.3 + actionBarI * 0.60,
                     halfOH - 0.85,
                     0.58, 0.58, 0.0,
                     0.0, 1.0, 0.0, 1.0,
                     0.09, 0.66, 0.97, 0.7,
                     art.ui.TEMP_inventoryBox);

        ability := world.playerAbilities[actionBarI];
        if ability != null
        {
            renderAnimation(&ability.icon,
                            -halfOW + 0.4 + actionBarI * 0.60,
                            halfOH - 0.75,
                            0.38, 0.38, -45.0);
        }

        renderSprite(-halfOW + 0.25 + actionBarI * 0.60,
                     halfOH - 0.9,
                     0.2, 0.2,
                     art.ui.actionBarSprites[actionBarI]);

        actionBarI = actionBarI + 1;
    }

    activeEffectCount: int32 = 0;
    effectI: int32 = 0;
    while effectI < world.player.effects.n
    {
        effect := &world.player.effects[effectI];
        effectI = effectI + 1;

        if effect.id == EFFECT_TYPEID_NONE then
            continue;

        bgColorR := 0.09;
        bgColorG := 0.97;
        bgColorB := 0.36;
        if effect.iconbg == EFFECT_ICONBG_NEGATIVE
        {
            bgColorR = 0.97;
            bgColorG = 0.09;
            bgColorB = 0.36;
        }

        renderSpriteAdv(-halfOW + 0.42 + activeEffectCount * 0.4,
                        halfOH - 1.3,
                        0.38, 0.38, 0.0,
                        0.0, 1.0, 0.0, 1.0,
                        bgColorR, bgColorG, bgColorB, 0.8,
                        art.ui.TEMP_inventoryBox);

        renderSpriteAdv(-halfOW + 0.45 + activeEffectCount * 0.4 + 0.01,
                        halfOH - 1.3 + 0.01,
                        0.36, 0.36, 0.0,
                        0.0, 1.0, 0.0, 1.0,
                        1.0, 1.0, 1.0, 1.0,
                        effect.icon);

        // CLEANUP: sprintf
        sec: int64 = cast(int64) asl.ceil(effect.time / 60.0);

        text: uint8[] : [64];
        textOff: int32 = 0;
        textOff = textOff + intToString(sec, text, textOff);
        text.n = cast(uint64) textOff;

        renderText(text, -halfOW + 0.45 + activeEffectCount * 0.4,
                          halfOH - 1.3 - 0.1, 0.13, TEXT_ALIGN_LEFT);

        activeEffectCount = activeEffectCount + 1;
    }

    if world.inventoryUp
    {
        INVENTORY_WIDTH: int32 = 12;
        INVENTORY_HEIGHT: int32 = 4;

        inventoryYI: int32 = 0;
        while inventoryYI < INVENTORY_HEIGHT
        {
            inventoryXI: int32 = 0;
            while inventoryXI < INVENTORY_WIDTH
            {
                renderSpriteAdv(-halfOW + 0.4 + inventoryXI * 0.5,
                                halfOH - 2.3 - inventoryYI * 0.5,
                                0.49, 0.49, 0.0,
                                0.0, 1.0, 0.0, 1.0,
                                0.09, 0.66, 0.97, 0.9,
                                art.ui.TEMP_inventoryBox);

                // TODO: Place icons in these...

                inventoryXI = inventoryXI + 1;
            }

            inventoryYI = inventoryYI + 1;
        }

        renderText("Inventory",
                   -halfOW + 0.5,
                   halfOH - 1.75,
                   0.2, TEXT_ALIGN_LEFT);

        EQUIPMENT_COUNT: int32 = 7;
        EQUIPMENT_TITLES: asl.string[] : [EQUIPMENT_COUNT];
        EQUIPMENT_TITLES[0] = "Helmet";
        EQUIPMENT_TITLES[1] = "Shirt";
        EQUIPMENT_TITLES[2] = "Pants";
        EQUIPMENT_TITLES[3] = "Accessories";
        EQUIPMENT_TITLES[4] = "";
        EQUIPMENT_TITLES[5] = "";
        EQUIPMENT_TITLES[6] = "Mount";

        equipmentI: int32 = 0;
        while equipmentI < EQUIPMENT_COUNT
        {
            renderSpriteAdv(halfOW - 0.8,
                            -halfOH + 0.2 + (EQUIPMENT_COUNT - equipmentI - 1) * 0.5,
                            0.49, 0.49, 0.0,
                            0.0, 1.0, 0.0, 1.0,
                            0.09, 0.66, 0.97, 0.9,
                            art.ui.TEMP_inventoryBox);

            renderText(EQUIPMENT_TITLES[equipmentI],
                       halfOW - 0.9,
                       -halfOH + 0.2 + (EQUIPMENT_COUNT - equipmentI - 0.65) * 0.5,
                       0.2, TEXT_ALIGN_RIGHT);

            equipmentI = equipmentI + 1;
        }
    }
}
