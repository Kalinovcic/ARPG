import "imports.aspel";

EntityType :: type struct
{
    name: asl.string;

    tick: delegate void(world: World^, entity: Entity^);
    render: delegate void(entity: Entity^);
    hurt: delegate void(world: World^, entitY: Entity^, dmg: float32);
};

Entity :: type struct
{
    entityType: EntityType^;

    x: float32;
    y: float32;

    vw: float32;
    vh: float32;
    pw: float32;
    ph: float32;
    pox: float32;
    poy: float32;
    hw: float32;
    hh: float32;
    hox: float32;
    hoy: float32;

    health: float32;
    maxHealth: float32;
    healthPerTick: float32;
    healthSteal: float32;

    mana: float32;
    maxMana: float32;
    manaPerTick: float32;
    manaSteal: float32;

    damageMultiplier: float32;
    missChance: float32;

    swiftness: float32;
    attackSpeed: float32;

    armor: float32;
    dodgeChance: float32;
    physicalResistance: float32;
    magicResistance: float32;
    poisonResistance: float32;

    effects: Effect[];
    animation: Animation;

    userdata: int32; // CLEANUP: deal with this
};

partialEntityCollideWithTerrain :: func bool(terrain: Terrain^, entity: Entity^,
                                             moveX: float32^, moveY: float32^)
{
    // TODO: improve

    tw := terrain.w;
    th := terrain.h;

    x := entity.x + entity.pox;
    y := entity.y + entity.poy;
    mx := ^moveX;
    my := ^moveY;
    tx := cast(int32) x;
    ty := cast(int32) y;
    t := getTile(terrain, tx, ty);

    nx := x + mx;
    ny := y + my;

    nxo := nx + entity.pw;
    nyo := ny + entity.ph;

    ntx := cast(int32) nx;
    nty := cast(int32) ny;
    ntxo := cast(int32) nxo;
    ntyo := cast(int32) nyo;

    tiy := nty;
    while tiy <= ntyo
    {
        if tiy < 0 || tiy >= th then
            return false;

        tix := ntx;
        while tix <= ntxo
        {
            if tix < 0 || tix >= tw then
                return false;

            nt := getTile(terrain, tix, tiy);
            if t != nt then
                return false;

            tix = tix + 1;
        }

        tiy = tiy + 1;
    }

    return true;
}

entityCollideWithTerrain :: func void(terrain: Terrain^, entity: Entity^,
                                      moveX: float32^, moveY: float32^)
{
    fake: float32 = 0;
    if !partialEntityCollideWithTerrain(terrain, entity, moveX, &fake) then ^moveX = 0;
    if !partialEntityCollideWithTerrain(terrain, entity, &fake, moveY) then ^moveY = 0;
}

pointCollideWithEntity :: func int32(world: World^, x: float32, y: float32, result: Entity^[])
{
    resultCount: int32 = 0;
    if result.n <= resultCount then
        return resultCount;

    i := 0;
    while i < world.entityList.n
    {
        i = i + 1;
        if !world.entityOccupied[i - 1] then continue;
        entity := &world.entityList[i - 1];

        ew := entity.hw;
        eh := entity.hh;
        ehw := ew / 2.0;
        ehh := eh / 2.0;
        ex := entity.x + entity.hox + ehw;
        ey := entity.y + entity.hoy + ehh;

        dx := cast(float32) asl.abs(x - ex);
        dy := cast(float32) asl.abs(y - ey);

        if dx > ehw || dy > ehh then continue;

        result[resultCount] = entity;
        resultCount = resultCount + 1;
        if result.n <= resultCount then
            return resultCount;
    }

    return resultCount;
}

// OPTIMIZE: Quad tree, maybe?
projectileCollideWithEntities :: func int32(world: World^, projectile: Projectile^,
                                            result: Entity^[])
{
    resultCount: int32 = 0;
    if result.n <= resultCount then
        return resultCount;

    x := projectile.x;
    y := projectile.y;
    r := projectile.radius;

    i := 0;
    while i < world.entityList.n
    {
        i = i + 1;
        if !world.entityOccupied[i - 1] then continue;
        entity := &world.entityList[i - 1];

        // RECONSIDER: Should we use the visual or physical box?
        ew := entity.hw;
        eh := entity.hh;
        ehw := ew / 2.0;
        ehh := eh / 2.0;
        ex := entity.x + entity.hox + ehw;
        ey := entity.y + entity.hoy + ehh;

        dx := cast(float32) asl.abs(x - ex);
        dy := cast(float32) asl.abs(y - ey);

        if dx > (ehw + r) then continue;
        if dy > (ehh + r) then continue;

        if dx <= ehw {}
        else if dy <= ehh {}
        else if ((dx - ehw) * (dx - ehw) + (dy - ehh) * (dy - ehh)) <= r * r {}
        else continue;

        result[resultCount] = entity;
        resultCount = resultCount + 1;
        if result.n <= resultCount then
            return resultCount;
    }

    return resultCount;
}

hurtEntity :: func bool(world: World^, e: Entity^, dmg: float32)
{
    // TODO: Check resistance, effects...

    e.health = e.health - dmg;
    if e.health <= 0.0
    {
        e.health = 0.0;
        removeEntityFromWorld(world, e);

        return true;
    }

    return false;
}

renderEntity :: func void(e: Entity^)
{
    renderAnimation(&e.animation, e.x, e.y, e.vw, e.vh, 0.0);
}

defaultOnDeath :: func void(e: Entity^)
{

}

renderEntityHitboxes :: func void(e: Entity^)
{
    x   := e.x;
    y   := e.y;
    vw  := e.vw;
    vh  := e.vh;
    pw  := e.pw;
    ph  := e.ph;
    pox := e.pox;
    poy := e.poy;
    hw  := e.hw;
    hh  := e.hh;
    hox := e.hox;
    hoy := e.hoy;

    renderBoxOutline(x + 0.0 + vw / 2.0, y + 0.0 + vh / 2.0, vw, vh, 0.0, 1.0, 0.0, 0.0, 1.0);
    renderBoxOutline(x + pox + pw / 2.0, y + poy + ph / 2.0, pw, ph, 0.0, 0.0, 1.0, 0.0, 1.0);
    renderBoxOutline(x + hox + hw / 2.0, y + hoy + hh / 2.0, hw, hh, 0.0, 0.0, 0.0, 1.0, 1.0);
}
